name: Terraform CD

on:
  push:
    branches: ['main'] # Automatically deploys to dev on push to main
  workflow_dispatch: # Allows manual triggering for prod

#  defines what level of access the GH runner has to your repository and other resources
permissions:
  contents: read # allows the workflow to read the contents of your repository
  id-token: write # enables OIDC authentication, allowing GH runner to obtain identity token from GH and use it to authenticate with Azure

jobs:
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write # Needed for OIDC
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # 1. OIDC Login
      - name: Azure Login (Dev)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # allow-no-subscriptions: true (if needed)

      # 2. Force Terraform to use OIDC instead of Azure CLI
      - name: Configure Env for Terraform OIDC
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          # If using Azure Public Cloud, this is optional. For other clouds, set ARM_ENVIRONMENT as needed.

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init (Dev)
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="container_name=dev-tfstate" \
            -backend-config="key=multilayer-webapp.tfstate"

      - name: Terraform Plan (Dev)
        working-directory: terraform
        run: terraform plan -var-file="dev.tfvars" -out=dev.tfplan

      - name: Terraform Apply (Dev)
        working-directory: terraform
        run: terraform apply -auto-approve dev.tfplan

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment: prod # Links to the GitHub Environment 'prod'
    permissions:
      id-token: write # Needed for OIDC
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Azure Login (Prod)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # allow-no-subscriptions: true (if needed)

      - name: Configure Env for Terraform OIDC
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init (Prod)
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="container_name=prod-tfstate" \
            -backend-config="key=multilayer-webapp.tfstate"

      - name: Terraform Plan (Prod)
        working-directory: terraform
        run: terraform plan -var-file="prod.tfvars" -out=prod.tfplan

      - name: Upload Terraform Plan for Review
        uses: actions/upload-artifact@v3
        with:
          name: terraform-prod-plan
          path: terraform/prod.tfplan

      - name: Terraform Apply (Prod)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        working-directory: terraform
        run: terraform apply -auto-approve prod.tfplan
