name: Terraform CD - Prod

on:
  pull_request:
    branches: [main]
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write
  pull-requests: write  # needed if we want to post plan output as PR comment

jobs:
  plan-prod:
    name: Plan for Prod
    runs-on: ubuntu-latest
    environment: prod-plan  # no gating environment
    outputs:
      tfplan_exitcode: ${{ steps.tf-plan.outputs.exitcode }}

    # Environment variables that the Azure provider and Terraform need.
    # This is exactly how the MS reference pipeline sets them: at the job level.
    env:
      TF_VAR_container_name: ${{ vars.TFSTATE_CONTAINER_NAME }}
      TF_VAR_env: prod
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: "true"
      ARM_SKIP_PROVIDER_REGISTRATION: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Omit `ref: main` so that on pull_request events,
          # we get the ephemeral "merge commit" for a true "would-be merged" plan.
          fetch-depth: 0

      - name: Azure Login (Prod)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # By default, azure/login@v1 uses OIDC token exchange if available
          # (since 'id-token: write' is set in top-level permissions)

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6
          terraform_wrapper: false

      - name: Terraform Init (Prod)
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="container_name=${TF_VAR_container_name}" \
            -backend-config="key=branch-based.tfstate"

      - name: Terraform Plan (Prod)
        id: tf-plan
        working-directory: terraform
        shell: bash
        run: |
          exitcode=0
          terraform plan -detailed-exitcode -no-color -out=prod.tfplan || exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          fi
          # exitcode=0 => no changes, exitcode=2 => changes present

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-prod-plan
          path: terraform/prod.tfplan

      - name: Create Plan String
        id: planstring
        working-directory: terraform
        run: |
          PLAN_CONTENT=$(terraform show -no-color prod.tfplan)

          # Use a random delimiter so we don't prematurely close the output
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$PLAN_CONTENT" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.planstring.outputs.summary }}
        run: echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Post Plan to PR (if PR event)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.planstring.outputs.summary }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = process.env.SUMMARY;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })


  apply-prod:
    name: Apply to Prod
    runs-on: ubuntu-latest
    needs: plan-prod
    environment: prod-apply  # gating with required approvals
    # Only apply if:
    #   (a) This is a push event (the PR was merged or a direct commit to main),
    #   (b) The plan exit code == '2' (changes present),
    #   (c) The environment approval is granted.
    if: >
      github.event_name == 'push' &&
      needs.plan-prod.outputs.tfplan_exitcode == '2'

    env:
      TF_VAR_container_name: ${{ vars.TFSTATE_CONTAINER_NAME }}
      TF_VAR_env: prod
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: "true"
      ARM_SKIP_PROVIDER_REGISTRATION: "true"

    steps:
      - name: (Manual Approval Required) Wait for Prod Approval
        run: echo "Waiting for environment approval..."

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Azure Login (Prod)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-prod-plan
          path: terraform

      - name: Terraform Init (Prod)
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="container_name=${TF_VAR_container_name}" \
            -backend-config="key=multilayer-webapp-prod.tfstate"

      - name: Terraform Apply (Prod)
        working-directory: terraform
        run: terraform apply -auto-approve prod.tfplan
